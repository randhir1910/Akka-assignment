1. USER STORY:

As a customer, I want to have an accounting system which can handle my automated transactions for paying bills.

Following are the scenarios:

1. I should be able to create an account with following info:

   account number, account holder name, address, user name, initial amount

   Note:
   a. There can be an 'user  account service' which is responsible for creating an account and related activities like linking billers to an  account.
   b. Add user account with account holder name, address, user name, initial amount
   c. Handle user name uniqueness while creating an account
   d. Provide appropriate error messages

   Hints:
   a. Use AccountService to create accounts with list of accounts
   b. Use AccountGeneratorActor for creating the accounts (Use bounded mailbox here with limit as 100 messages)
   c. handle account number implicitly

2. I should be able to link billers to my account with following info:

   biller category, biller name, account number, transaction date, amount, total iterations, executed iterations, paid amount

   biller category can be as following only:
   a. phone
   b. electricity
   c. internet
   d. food
   e. car

   where 'amount' is the amount paid at a time and 'paid amount' is total paid amount to the biller

   Hints:
   a. Use in memory map for keeping information related to account and linked billers

3. I should be able to schedule my transactions at the time of salary deposit for different billers.

4. As an company accountant I want to transfer salary to the employees accounts using account number and name.

5. Within every 5 minute i want to generate a report for all the user accounts with related biller accounts with all the info written to a file.


Developer note:

1. All the data should be stored on main memory using scala objects in the form of Map[String, UserAccount] and so on. Please use your creativity to handle this. Make a different service to handle all the operations related to in memory database(maps).
2. There can be a separate service to handle salary deposit for accountant
3. After depositing salary to an account process all the transaction to all the billers in different actors parallely.
4. Write unit test cases with coverage > 90.
5. Write integration test to demonstrate all scenarios.
6. Create an application object with test data to demonstrate all the scenarios.
7. Create custom dispatchers for all the actors with following configuration:
parallelism-min=1
parallelism-factor = 1.0
parallelism-max = 8
executor = "fork-join-executor"
throughput = 10
8. Define appropriate fault tolerance policy for all the parent actors(SalaryDepositeActor).


Here is an image to show a sample architecture of the application we are going to develop. You can make changes into it according to the requirements.
